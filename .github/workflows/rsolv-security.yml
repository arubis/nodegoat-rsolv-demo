name: RSOLV Security Scan and Fix

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Operation mode'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - scan
          - validate
          - mitigate
      max_issues:
        description: 'Maximum number of issues to process'
        required: false
        default: '3'
        type: string
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches:
      - main
      - master

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  security-events: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: RSOLV Security Analysis and Fix

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better git operations

      - name: Configure Git
        run: |
          git config --global user.email "rsolv-bot@rsolv.dev"
          git config --global user.name "RSOLV Security Bot"

      - name: Run RSOLV Security Analysis
        uses: rsolv-dev/RSOLV-action@main
        id: rsolv
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # API Configuration
          rsolvApiKey: ${{ secrets.RSOLV_API_KEY }}
          api_url: 'https://api.rsolv.dev'

          # Operation Configuration
          mode: ${{ github.event.inputs.mode || 'full' }}
          scan_mode: 'fix'  # Generate fixes, not just scan
          max_issues: ${{ github.event.inputs.max_issues || '3' }}

          # Security Analysis Settings
          enable_security_analysis: 'true'
          enable_ast_validation: 'true'
          enable_enhanced_context: 'true'
          use_structured_phases: 'true'

          # Fix Generation Settings
          use_git_based_editing: 'true'  # In-place editing per ADR-012
          enable_educational_pr: 'true'  # Add security explanations

          # Issue Configuration (optional - can auto-detect)
          issue_label: 'security'

      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: rsolv-security-report
          path: |
            rsolv-scan-results.json
            rsolv-validation-results.json
            rsolv-mitigation-results.json
          retention-days: 30

      - name: Comment on PRs Created
        if: steps.rsolv.outputs.created_prs != ''
        run: |
          echo "ðŸ”’ RSOLV Security Analysis Complete"
          echo "Pull Requests Created: ${{ steps.rsolv.outputs.created_prs }}"

      - name: Post Summary
        if: always()
        run: |
          echo "## ðŸ”’ RSOLV Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "rsolv-scan-results.json" ]; then
            echo "### Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            jq '.summary' rsolv-scan-results.json >> $GITHUB_STEP_SUMMARY || echo "No scan results"
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.rsolv.outputs.created_prs }}" != "" ]; then
            echo "### Pull Requests Created" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.rsolv.outputs.created_prs }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.rsolv.outputs.security_findings }}" != "" ]; then
            echo "### Security Findings" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            echo '${{ steps.rsolv.outputs.security_findings }}' | jq '.' >> $GITHUB_STEP_SUMMARY || echo "Unable to parse findings"
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Analysis complete at $(date)" >> $GITHUB_STEP_SUMMARY